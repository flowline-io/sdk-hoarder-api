/*
Hoarder API

The API for the Hoarder app

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HighlightsPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HighlightsPostRequest{}

// HighlightsPostRequest struct for HighlightsPostRequest
type HighlightsPostRequest struct {
	BookmarkId string `json:"bookmarkId"`
	StartOffset float32 `json:"startOffset"`
	EndOffset float32 `json:"endOffset"`
	Color *string `json:"color,omitempty"`
	Text NullableString `json:"text"`
	Note NullableString `json:"note"`
}

type _HighlightsPostRequest HighlightsPostRequest

// NewHighlightsPostRequest instantiates a new HighlightsPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHighlightsPostRequest(bookmarkId string, startOffset float32, endOffset float32, text NullableString, note NullableString) *HighlightsPostRequest {
	this := HighlightsPostRequest{}
	this.BookmarkId = bookmarkId
	this.StartOffset = startOffset
	this.EndOffset = endOffset
	var color string = "yellow"
	this.Color = &color
	this.Text = text
	this.Note = note
	return &this
}

// NewHighlightsPostRequestWithDefaults instantiates a new HighlightsPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHighlightsPostRequestWithDefaults() *HighlightsPostRequest {
	this := HighlightsPostRequest{}
	var color string = "yellow"
	this.Color = &color
	return &this
}

// GetBookmarkId returns the BookmarkId field value
func (o *HighlightsPostRequest) GetBookmarkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BookmarkId
}

// GetBookmarkIdOk returns a tuple with the BookmarkId field value
// and a boolean to check if the value has been set.
func (o *HighlightsPostRequest) GetBookmarkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BookmarkId, true
}

// SetBookmarkId sets field value
func (o *HighlightsPostRequest) SetBookmarkId(v string) {
	o.BookmarkId = v
}

// GetStartOffset returns the StartOffset field value
func (o *HighlightsPostRequest) GetStartOffset() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.StartOffset
}

// GetStartOffsetOk returns a tuple with the StartOffset field value
// and a boolean to check if the value has been set.
func (o *HighlightsPostRequest) GetStartOffsetOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartOffset, true
}

// SetStartOffset sets field value
func (o *HighlightsPostRequest) SetStartOffset(v float32) {
	o.StartOffset = v
}

// GetEndOffset returns the EndOffset field value
func (o *HighlightsPostRequest) GetEndOffset() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.EndOffset
}

// GetEndOffsetOk returns a tuple with the EndOffset field value
// and a boolean to check if the value has been set.
func (o *HighlightsPostRequest) GetEndOffsetOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndOffset, true
}

// SetEndOffset sets field value
func (o *HighlightsPostRequest) SetEndOffset(v float32) {
	o.EndOffset = v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *HighlightsPostRequest) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighlightsPostRequest) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *HighlightsPostRequest) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *HighlightsPostRequest) SetColor(v string) {
	o.Color = &v
}

// GetText returns the Text field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HighlightsPostRequest) GetText() string {
	if o == nil || o.Text.Get() == nil {
		var ret string
		return ret
	}

	return *o.Text.Get()
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HighlightsPostRequest) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Text.Get(), o.Text.IsSet()
}

// SetText sets field value
func (o *HighlightsPostRequest) SetText(v string) {
	o.Text.Set(&v)
}

// GetNote returns the Note field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HighlightsPostRequest) GetNote() string {
	if o == nil || o.Note.Get() == nil {
		var ret string
		return ret
	}

	return *o.Note.Get()
}

// GetNoteOk returns a tuple with the Note field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HighlightsPostRequest) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Note.Get(), o.Note.IsSet()
}

// SetNote sets field value
func (o *HighlightsPostRequest) SetNote(v string) {
	o.Note.Set(&v)
}

func (o HighlightsPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HighlightsPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bookmarkId"] = o.BookmarkId
	toSerialize["startOffset"] = o.StartOffset
	toSerialize["endOffset"] = o.EndOffset
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	toSerialize["text"] = o.Text.Get()
	toSerialize["note"] = o.Note.Get()
	return toSerialize, nil
}

func (o *HighlightsPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bookmarkId",
		"startOffset",
		"endOffset",
		"text",
		"note",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHighlightsPostRequest := _HighlightsPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHighlightsPostRequest)

	if err != nil {
		return err
	}

	*o = HighlightsPostRequest(varHighlightsPostRequest)

	return err
}

type NullableHighlightsPostRequest struct {
	value *HighlightsPostRequest
	isSet bool
}

func (v NullableHighlightsPostRequest) Get() *HighlightsPostRequest {
	return v.value
}

func (v *NullableHighlightsPostRequest) Set(val *HighlightsPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHighlightsPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHighlightsPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHighlightsPostRequest(val *HighlightsPostRequest) *NullableHighlightsPostRequest {
	return &NullableHighlightsPostRequest{value: val, isSet: true}
}

func (v NullableHighlightsPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHighlightsPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


