/*
Hoarder API

Testing BookmarksAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	openapiclient "github.com/flowline-io/sdk-hoarder-api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_openapi_BookmarksAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BookmarksAPIService BookmarksBookmarkIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bookmarkId string

		httpRes, err := apiClient.BookmarksAPI.BookmarksBookmarkIdDelete(context.Background(), bookmarkId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BookmarksAPIService BookmarksBookmarkIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bookmarkId string

		resp, httpRes, err := apiClient.BookmarksAPI.BookmarksBookmarkIdGet(context.Background(), bookmarkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BookmarksAPIService BookmarksBookmarkIdPatch", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bookmarkId string

		resp, httpRes, err := apiClient.BookmarksAPI.BookmarksBookmarkIdPatch(context.Background(), bookmarkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BookmarksAPIService BookmarksBookmarkIdTagsDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bookmarkId string

		resp, httpRes, err := apiClient.BookmarksAPI.BookmarksBookmarkIdTagsDelete(context.Background(), bookmarkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BookmarksAPIService BookmarksBookmarkIdTagsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bookmarkId string

		resp, httpRes, err := apiClient.BookmarksAPI.BookmarksBookmarkIdTagsPost(context.Background(), bookmarkId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BookmarksAPIService BookmarksGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BookmarksAPI.BookmarksGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BookmarksAPIService BookmarksPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.BookmarksAPI.BookmarksPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
