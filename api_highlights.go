/*
Hoarder API

The API for the Hoarder app

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// HighlightsAPIService HighlightsAPI service
type HighlightsAPIService service

type ApiHighlightsGetRequest struct {
	ctx context.Context
	ApiService *HighlightsAPIService
	limit *float32
	cursor *string
}

func (r ApiHighlightsGetRequest) Limit(limit float32) ApiHighlightsGetRequest {
	r.limit = &limit
	return r
}

func (r ApiHighlightsGetRequest) Cursor(cursor string) ApiHighlightsGetRequest {
	r.cursor = &cursor
	return r
}

func (r ApiHighlightsGetRequest) Execute() (*PaginatedHighlights, *http.Response, error) {
	return r.ApiService.HighlightsGetExecute(r)
}

/*
HighlightsGet Get all highlights

Get all highlights

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiHighlightsGetRequest
*/
func (a *HighlightsAPIService) HighlightsGet(ctx context.Context) ApiHighlightsGetRequest {
	return ApiHighlightsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedHighlights
func (a *HighlightsAPIService) HighlightsGetExecute(r ApiHighlightsGetRequest) (*PaginatedHighlights, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedHighlights
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HighlightsAPIService.HighlightsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/highlights"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.cursor != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cursor", r.cursor, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHighlightsHighlightIdDeleteRequest struct {
	ctx context.Context
	ApiService *HighlightsAPIService
	highlightId string
}

func (r ApiHighlightsHighlightIdDeleteRequest) Execute() (*Highlight, *http.Response, error) {
	return r.ApiService.HighlightsHighlightIdDeleteExecute(r)
}

/*
HighlightsHighlightIdDelete Delete a highlight

Delete highlight by its id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param highlightId
 @return ApiHighlightsHighlightIdDeleteRequest
*/
func (a *HighlightsAPIService) HighlightsHighlightIdDelete(ctx context.Context, highlightId string) ApiHighlightsHighlightIdDeleteRequest {
	return ApiHighlightsHighlightIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		highlightId: highlightId,
	}
}

// Execute executes the request
//  @return Highlight
func (a *HighlightsAPIService) HighlightsHighlightIdDeleteExecute(r ApiHighlightsHighlightIdDeleteRequest) (*Highlight, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Highlight
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HighlightsAPIService.HighlightsHighlightIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/highlights/{highlightId}"
	localVarPath = strings.Replace(localVarPath, "{"+"highlightId"+"}", url.PathEscape(parameterValueToString(r.highlightId, "highlightId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHighlightsHighlightIdGetRequest struct {
	ctx context.Context
	ApiService *HighlightsAPIService
	highlightId string
}

func (r ApiHighlightsHighlightIdGetRequest) Execute() (*Highlight, *http.Response, error) {
	return r.ApiService.HighlightsHighlightIdGetExecute(r)
}

/*
HighlightsHighlightIdGet Get a single highlight

Get highlight by its id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param highlightId
 @return ApiHighlightsHighlightIdGetRequest
*/
func (a *HighlightsAPIService) HighlightsHighlightIdGet(ctx context.Context, highlightId string) ApiHighlightsHighlightIdGetRequest {
	return ApiHighlightsHighlightIdGetRequest{
		ApiService: a,
		ctx: ctx,
		highlightId: highlightId,
	}
}

// Execute executes the request
//  @return Highlight
func (a *HighlightsAPIService) HighlightsHighlightIdGetExecute(r ApiHighlightsHighlightIdGetRequest) (*Highlight, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Highlight
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HighlightsAPIService.HighlightsHighlightIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/highlights/{highlightId}"
	localVarPath = strings.Replace(localVarPath, "{"+"highlightId"+"}", url.PathEscape(parameterValueToString(r.highlightId, "highlightId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHighlightsHighlightIdPatchRequest struct {
	ctx context.Context
	ApiService *HighlightsAPIService
	highlightId string
	highlightsHighlightIdPatchRequest *HighlightsHighlightIdPatchRequest
}

// The data to update. Only the fields you want to update need to be provided.
func (r ApiHighlightsHighlightIdPatchRequest) HighlightsHighlightIdPatchRequest(highlightsHighlightIdPatchRequest HighlightsHighlightIdPatchRequest) ApiHighlightsHighlightIdPatchRequest {
	r.highlightsHighlightIdPatchRequest = &highlightsHighlightIdPatchRequest
	return r
}

func (r ApiHighlightsHighlightIdPatchRequest) Execute() (*Highlight, *http.Response, error) {
	return r.ApiService.HighlightsHighlightIdPatchExecute(r)
}

/*
HighlightsHighlightIdPatch Update a highlight

Update highlight by its id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param highlightId
 @return ApiHighlightsHighlightIdPatchRequest
*/
func (a *HighlightsAPIService) HighlightsHighlightIdPatch(ctx context.Context, highlightId string) ApiHighlightsHighlightIdPatchRequest {
	return ApiHighlightsHighlightIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		highlightId: highlightId,
	}
}

// Execute executes the request
//  @return Highlight
func (a *HighlightsAPIService) HighlightsHighlightIdPatchExecute(r ApiHighlightsHighlightIdPatchRequest) (*Highlight, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Highlight
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HighlightsAPIService.HighlightsHighlightIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/highlights/{highlightId}"
	localVarPath = strings.Replace(localVarPath, "{"+"highlightId"+"}", url.PathEscape(parameterValueToString(r.highlightId, "highlightId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.highlightsHighlightIdPatchRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHighlightsPostRequest struct {
	ctx context.Context
	ApiService *HighlightsAPIService
	highlightsPostRequest *HighlightsPostRequest
}

// The highlight to create
func (r ApiHighlightsPostRequest) HighlightsPostRequest(highlightsPostRequest HighlightsPostRequest) ApiHighlightsPostRequest {
	r.highlightsPostRequest = &highlightsPostRequest
	return r
}

func (r ApiHighlightsPostRequest) Execute() (*Highlight, *http.Response, error) {
	return r.ApiService.HighlightsPostExecute(r)
}

/*
HighlightsPost Create a new highlight

Create a new highlight

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiHighlightsPostRequest
*/
func (a *HighlightsAPIService) HighlightsPost(ctx context.Context) ApiHighlightsPostRequest {
	return ApiHighlightsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Highlight
func (a *HighlightsAPIService) HighlightsPostExecute(r ApiHighlightsPostRequest) (*Highlight, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Highlight
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HighlightsAPIService.HighlightsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/highlights"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.highlightsPostRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
