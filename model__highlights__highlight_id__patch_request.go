/*
Hoarder API

The API for the Hoarder app

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the HighlightsHighlightIdPatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HighlightsHighlightIdPatchRequest{}

// HighlightsHighlightIdPatchRequest struct for HighlightsHighlightIdPatchRequest
type HighlightsHighlightIdPatchRequest struct {
	Color *string `json:"color,omitempty"`
}

// NewHighlightsHighlightIdPatchRequest instantiates a new HighlightsHighlightIdPatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHighlightsHighlightIdPatchRequest() *HighlightsHighlightIdPatchRequest {
	this := HighlightsHighlightIdPatchRequest{}
	return &this
}

// NewHighlightsHighlightIdPatchRequestWithDefaults instantiates a new HighlightsHighlightIdPatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHighlightsHighlightIdPatchRequestWithDefaults() *HighlightsHighlightIdPatchRequest {
	this := HighlightsHighlightIdPatchRequest{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *HighlightsHighlightIdPatchRequest) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighlightsHighlightIdPatchRequest) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *HighlightsHighlightIdPatchRequest) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *HighlightsHighlightIdPatchRequest) SetColor(v string) {
	o.Color = &v
}

func (o HighlightsHighlightIdPatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HighlightsHighlightIdPatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	return toSerialize, nil
}

type NullableHighlightsHighlightIdPatchRequest struct {
	value *HighlightsHighlightIdPatchRequest
	isSet bool
}

func (v NullableHighlightsHighlightIdPatchRequest) Get() *HighlightsHighlightIdPatchRequest {
	return v.value
}

func (v *NullableHighlightsHighlightIdPatchRequest) Set(val *HighlightsHighlightIdPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHighlightsHighlightIdPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHighlightsHighlightIdPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHighlightsHighlightIdPatchRequest(val *HighlightsHighlightIdPatchRequest) *NullableHighlightsHighlightIdPatchRequest {
	return &NullableHighlightsHighlightIdPatchRequest{value: val, isSet: true}
}

func (v NullableHighlightsHighlightIdPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHighlightsHighlightIdPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


