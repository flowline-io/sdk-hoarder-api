/*
Hoarder API

The API for the Hoarder app

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the Tag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tag{}

// Tag struct for Tag
type Tag struct {
	Id                         string                        `json:"id"`
	Name                       string                        `json:"name"`
	NumBookmarks               float32                       `json:"numBookmarks"`
	NumBookmarksByAttachedType TagNumBookmarksByAttachedType `json:"numBookmarksByAttachedType"`
}

type _Tag Tag

// NewTag instantiates a new Tag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTag(id string, name string, numBookmarks float32, numBookmarksByAttachedType TagNumBookmarksByAttachedType) *Tag {
	this := Tag{}
	this.Id = id
	this.Name = name
	this.NumBookmarks = numBookmarks
	this.NumBookmarksByAttachedType = numBookmarksByAttachedType
	return &this
}

// NewTagWithDefaults instantiates a new Tag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagWithDefaults() *Tag {
	this := Tag{}
	return &this
}

// GetId returns the Id field value
func (o *Tag) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Tag) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Tag) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Tag) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Tag) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Tag) SetName(v string) {
	o.Name = v
}

// GetNumBookmarks returns the NumBookmarks field value
func (o *Tag) GetNumBookmarks() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.NumBookmarks
}

// GetNumBookmarksOk returns a tuple with the NumBookmarks field value
// and a boolean to check if the value has been set.
func (o *Tag) GetNumBookmarksOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumBookmarks, true
}

// SetNumBookmarks sets field value
func (o *Tag) SetNumBookmarks(v float32) {
	o.NumBookmarks = v
}

// GetNumBookmarksByAttachedType returns the NumBookmarksByAttachedType field value
func (o *Tag) GetNumBookmarksByAttachedType() TagNumBookmarksByAttachedType {
	if o == nil {
		var ret TagNumBookmarksByAttachedType
		return ret
	}

	return o.NumBookmarksByAttachedType
}

// GetNumBookmarksByAttachedTypeOk returns a tuple with the NumBookmarksByAttachedType field value
// and a boolean to check if the value has been set.
func (o *Tag) GetNumBookmarksByAttachedTypeOk() (*TagNumBookmarksByAttachedType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumBookmarksByAttachedType, true
}

// SetNumBookmarksByAttachedType sets field value
func (o *Tag) SetNumBookmarksByAttachedType(v TagNumBookmarksByAttachedType) {
	o.NumBookmarksByAttachedType = v
}

func (o Tag) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["numBookmarks"] = o.NumBookmarks
	toSerialize["numBookmarksByAttachedType"] = o.NumBookmarksByAttachedType
	return toSerialize, nil
}

func (o *Tag) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"numBookmarks",
		"numBookmarksByAttachedType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTag := _Tag{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTag)

	if err != nil {
		return err
	}

	*o = Tag(varTag)

	return err
}

type NullableTag struct {
	value *Tag
	isSet bool
}

func (v NullableTag) Get() *Tag {
	return v.value
}

func (v *NullableTag) Set(val *Tag) {
	v.value = val
	v.isSet = true
}

func (v NullableTag) IsSet() bool {
	return v.isSet
}

func (v *NullableTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTag(val *Tag) *NullableTag {
	return &NullableTag{value: val, isSet: true}
}

func (v NullableTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
