openapi: 3.0.0
info:
  description: The API for the Hoarder app
  title: Hoarder API
  version: 1.0.0
servers:
- url: "{address}/api/v1"
  variables:
    address:
      default: https://try.hoarder.app
      description: The address of the hoarder server
paths:
  /bookmarks:
    get:
      description: Get all bookmarks
      parameters:
      - explode: true
        in: query
        name: archived
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: favourited
        required: false
        schema:
          type: boolean
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: number
        style: form
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          $ref: '#/components/schemas/Cursor'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBookmarks'
          description: Object with all bookmarks data.
      security:
      - bearerAuth: []
      summary: Get all bookmarks
      tags:
      - Bookmarks
    post:
      description: Create a new bookmark
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_bookmarks_post_request'
        description: The bookmark to create
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
          description: The created bookmark
      security:
      - bearerAuth: []
      summary: Create a new bookmark
      tags:
      - Bookmarks
  /bookmarks/search:
    get:
      description: Search bookmarks
      parameters:
      - explode: true
        in: query
        name: q
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: number
        style: form
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          $ref: '#/components/schemas/Cursor'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBookmarks'
          description: Object with the search results.
      security:
      - bearerAuth: []
      summary: Search bookmarks
      tags:
      - Bookmarks
  /bookmarks/{bookmarkId}:
    delete:
      description: Delete bookmark by its id
      parameters:
      - explode: false
        in: path
        name: bookmarkId
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkId'
        style: simple
      responses:
        "204":
          description: No content - the bookmark was deleted
      security:
      - bearerAuth: []
      summary: Delete a bookmark
      tags:
      - Bookmarks
    get:
      description: Get bookmark by its id
      parameters:
      - explode: false
        in: path
        name: bookmarkId
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bookmark'
          description: Object with bookmark data.
      security:
      - bearerAuth: []
      summary: Get a single bookmark
      tags:
      - Bookmarks
    patch:
      description: Update bookmark by its id
      parameters:
      - explode: false
        in: path
        name: bookmarkId
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_bookmarks__bookmarkId__patch_request'
        description: The data to update. Only the fields you want to update need to
          be provided.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_bookmarks__bookmarkId__patch_200_response'
          description: The updated bookmark
      security:
      - bearerAuth: []
      summary: Update a bookmark
      tags:
      - Bookmarks
  /bookmarks/{bookmarkId}/tags:
    delete:
      description: Detach tags from a bookmark
      parameters:
      - explode: false
        in: path
        name: bookmarkId
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_bookmarks__bookmarkId__tags_post_request'
        description: The tags to detach.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_bookmarks__bookmarkId__tags_delete_200_response'
          description: The list of detached tag ids
      security:
      - bearerAuth: []
      summary: Detach tags from a bookmark
      tags:
      - Bookmarks
    post:
      description: Attach tags to a bookmark
      parameters:
      - explode: false
        in: path
        name: bookmarkId
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_bookmarks__bookmarkId__tags_post_request'
        description: The tags to attach.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_bookmarks__bookmarkId__tags_post_200_response'
          description: The list of attached tag ids
      security:
      - bearerAuth: []
      summary: Attach tags to a bookmark
      tags:
      - Bookmarks
  /bookmarks/{bookmarkId}/highlights:
    get:
      description: Get highlights of a bookmark
      parameters:
      - explode: false
        in: path
        name: bookmarkId
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_bookmarks__bookmarkId__highlights_get_200_response'
          description: The list of highlights
      security:
      - bearerAuth: []
      summary: Get highlights of a bookmark
      tags:
      - Bookmarks
  /bookmarks/{bookmarkId}/assets:
    post:
      description: Attach a new asset to a bookmark
      parameters:
      - explode: false
        in: path
        name: bookmarkId
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_bookmarks__bookmarkId__assets_post_request'
        description: The asset to attach
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_bookmarks__bookmarkId__assets_post_request'
          description: The attached asset
      security:
      - bearerAuth: []
      summary: Attach asset
      tags:
      - Bookmarks
  /bookmarks/{bookmarkId}/assets/{assetId}:
    delete:
      description: Detach an asset from a bookmark
      parameters:
      - explode: false
        in: path
        name: bookmarkId
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkId'
        style: simple
      - explode: false
        in: path
        name: assetId
        required: true
        schema:
          $ref: '#/components/schemas/AssetId'
        style: simple
      responses:
        "204":
          description: No content - asset was detached successfully
      security:
      - bearerAuth: []
      summary: Detach asset
      tags:
      - Bookmarks
    put:
      description: Replace an existing asset with a new one
      parameters:
      - explode: false
        in: path
        name: bookmarkId
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkId'
        style: simple
      - explode: false
        in: path
        name: assetId
        required: true
        schema:
          $ref: '#/components/schemas/AssetId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_bookmarks__bookmarkId__assets__assetId__put_request'
        description: The new asset to replace with
      responses:
        "204":
          description: No content - asset was replaced successfully
      security:
      - bearerAuth: []
      summary: Replace asset
      tags:
      - Bookmarks
  /lists:
    get:
      description: Get all lists
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_lists_get_200_response'
          description: Object with all lists data.
      security:
      - bearerAuth: []
      summary: Get all lists
      tags:
      - Lists
    post:
      description: Create a new list
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_lists_post_request'
        description: The list to create
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: The created list
      security:
      - bearerAuth: []
      summary: Create a new list
      tags:
      - Lists
  /lists/{listId}:
    delete:
      description: Delete list by its id
      parameters:
      - explode: false
        in: path
        name: listId
        required: true
        schema:
          $ref: '#/components/schemas/ListId'
        style: simple
      responses:
        "204":
          description: No content - the bookmark was deleted
      security:
      - bearerAuth: []
      summary: Delete a list
      tags:
      - Lists
    get:
      description: Get list by its id
      parameters:
      - explode: false
        in: path
        name: listId
        required: true
        schema:
          $ref: '#/components/schemas/ListId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: Object with list data.
      security:
      - bearerAuth: []
      summary: Get a single list
      tags:
      - Lists
    patch:
      description: Update list by its id
      parameters:
      - explode: false
        in: path
        name: listId
        required: true
        schema:
          $ref: '#/components/schemas/ListId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_lists__listId__patch_request'
        description: The data to update. Only the fields you want to update need to
          be provided.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
          description: The updated list
      security:
      - bearerAuth: []
      summary: Update a list
      tags:
      - Lists
  /lists/{listId}/bookmarks:
    get:
      description: Get the bookmarks in a list
      parameters:
      - explode: false
        in: path
        name: listId
        required: true
        schema:
          $ref: '#/components/schemas/ListId'
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: number
        style: form
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          $ref: '#/components/schemas/Cursor'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBookmarks'
          description: Object with list data.
      security:
      - bearerAuth: []
      summary: Get a bookmarks in a list
      tags:
      - Lists
  /lists/{listId}/bookmarks/{bookmarkId}:
    delete:
      description: Remove the bookmarks from a list
      parameters:
      - explode: false
        in: path
        name: listId
        required: true
        schema:
          $ref: '#/components/schemas/ListId'
        style: simple
      - explode: false
        in: path
        name: bookmarkId
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkId'
        style: simple
      responses:
        "204":
          description: No content - the bookmark was added
      security:
      - bearerAuth: []
      summary: Remove a bookmark from a list
      tags:
      - Lists
    put:
      description: Add the bookmarks to a list
      parameters:
      - explode: false
        in: path
        name: listId
        required: true
        schema:
          $ref: '#/components/schemas/ListId'
        style: simple
      - explode: false
        in: path
        name: bookmarkId
        required: true
        schema:
          $ref: '#/components/schemas/BookmarkId'
        style: simple
      responses:
        "204":
          description: No content - the bookmark was added
      security:
      - bearerAuth: []
      summary: Add a bookmark to a list
      tags:
      - Lists
  /tags:
    get:
      description: Get all tags
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_tags_get_200_response'
          description: Object with all tags data.
      security:
      - bearerAuth: []
      summary: Get all tags
      tags:
      - Tags
  /tags/{tagId}:
    delete:
      description: Delete tag by its id
      parameters:
      - explode: false
        in: path
        name: tagId
        required: true
        schema:
          $ref: '#/components/schemas/TagId'
        style: simple
      responses:
        "204":
          description: No content - the bookmark was deleted
      security:
      - bearerAuth: []
      summary: Delete a tag
      tags:
      - Tags
    get:
      description: Get tag by its id
      parameters:
      - explode: false
        in: path
        name: tagId
        required: true
        schema:
          $ref: '#/components/schemas/TagId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: Object with list data.
      security:
      - bearerAuth: []
      summary: Get a single tag
      tags:
      - Tags
    patch:
      description: Update tag by its id
      parameters:
      - explode: false
        in: path
        name: tagId
        required: true
        schema:
          $ref: '#/components/schemas/TagId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_tags__tagId__patch_request'
        description: The data to update. Only the fields you want to update need to
          be provided.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: The updated tag
      security:
      - bearerAuth: []
      summary: Update a tag
      tags:
      - Tags
  /tags/{tagId}/bookmarks:
    get:
      description: Get the bookmarks with the tag
      parameters:
      - explode: false
        in: path
        name: tagId
        required: true
        schema:
          $ref: '#/components/schemas/TagId'
        style: simple
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: number
        style: form
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          $ref: '#/components/schemas/Cursor'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBookmarks'
          description: Object with list data.
      security:
      - bearerAuth: []
      summary: Get a bookmarks with the tag
      tags:
      - Tags
  /highlights:
    get:
      description: Get all highlights
      parameters:
      - explode: true
        in: query
        name: limit
        required: false
        schema:
          type: number
        style: form
      - explode: true
        in: query
        name: cursor
        required: false
        schema:
          $ref: '#/components/schemas/Cursor'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedHighlights'
          description: Object with all highlights data.
      security:
      - bearerAuth: []
      summary: Get all highlights
      tags:
      - Highlights
    post:
      description: Create a new highlight
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_highlights_post_request'
        description: The highlight to create
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Highlight'
          description: The created highlight
      security:
      - bearerAuth: []
      summary: Create a new highlight
      tags:
      - Highlights
  /highlights/{highlightId}:
    delete:
      description: Delete highlight by its id
      parameters:
      - explode: false
        in: path
        name: highlightId
        required: true
        schema:
          $ref: '#/components/schemas/HighlightId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Highlight'
          description: The deleted highlight
      security:
      - bearerAuth: []
      summary: Delete a highlight
      tags:
      - Highlights
    get:
      description: Get highlight by its id
      parameters:
      - explode: false
        in: path
        name: highlightId
        required: true
        schema:
          $ref: '#/components/schemas/HighlightId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Highlight'
          description: Object with highlight data.
      security:
      - bearerAuth: []
      summary: Get a single highlight
      tags:
      - Highlights
    patch:
      description: Update highlight by its id
      parameters:
      - explode: false
        in: path
        name: highlightId
        required: true
        schema:
          $ref: '#/components/schemas/HighlightId'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/_highlights__highlightId__patch_request'
        description: The data to update. Only the fields you want to update need to
          be provided.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Highlight'
          description: The updated highlight
      security:
      - bearerAuth: []
      summary: Update a highlight
      tags:
      - Highlights
components:
  parameters:
    AssetId:
      explode: false
      in: path
      name: assetId
      required: true
      schema:
        $ref: '#/components/schemas/AssetId'
      style: simple
    BookmarkId:
      explode: false
      in: path
      name: bookmarkId
      required: true
      schema:
        $ref: '#/components/schemas/BookmarkId'
      style: simple
    ListId:
      explode: false
      in: path
      name: listId
      required: true
      schema:
        $ref: '#/components/schemas/ListId'
      style: simple
    TagId:
      explode: false
      in: path
      name: tagId
      required: true
      schema:
        $ref: '#/components/schemas/TagId'
      style: simple
    HighlightId:
      explode: false
      in: path
      name: highlightId
      required: true
      schema:
        $ref: '#/components/schemas/HighlightId'
      style: simple
  schemas:
    AssetId:
      example: ieidlxygmwj87oxz5hxttoc8
      type: string
    BookmarkId:
      example: ieidlxygmwj87oxz5hxttoc8
      type: string
    ListId:
      example: ieidlxygmwj87oxz5hxttoc8
      type: string
    TagId:
      example: ieidlxygmwj87oxz5hxttoc8
      type: string
    HighlightId:
      example: ieidlxygmwj87oxz5hxttoc8
      type: string
    Bookmark:
      example:
        summary: summary
        createdAt: createdAt
        archived: true
        taggingStatus: success
        note: note
        assets:
        - id: id
          assetType: screenshot
        - id: id
          assetType: screenshot
        favourited: true
        modifiedAt: modifiedAt
        id: id
        title: title
        content:
          favicon: favicon
          videoAssetId: videoAssetId
          description: description
          precrawledArchiveAssetId: precrawledArchiveAssetId
          type: link
          title: title
          url: url
          fullPageArchiveAssetId: fullPageArchiveAssetId
          htmlContent: htmlContent
          crawledAt: crawledAt
          screenshotAssetId: screenshotAssetId
          imageAssetId: imageAssetId
          imageUrl: imageUrl
        tags:
        - name: name
          attachedBy: ai
          id: id
        - name: name
          attachedBy: ai
          id: id
      properties:
        id:
          type: string
        createdAt:
          type: string
        modifiedAt:
          nullable: true
          type: string
        title:
          maxLength: 250
          nullable: true
          type: string
        archived:
          type: boolean
        favourited:
          type: boolean
        taggingStatus:
          enum:
          - success
          - failure
          - pending
          nullable: true
          type: string
        note:
          nullable: true
          type: string
        summary:
          nullable: true
          type: string
        tags:
          items:
            $ref: '#/components/schemas/Bookmark_tags_inner'
          type: array
        content:
          $ref: '#/components/schemas/Bookmark_content'
        assets:
          items:
            $ref: '#/components/schemas/_bookmarks__bookmarkId__assets_post_request'
          type: array
      required:
      - archived
      - assets
      - content
      - createdAt
      - favourited
      - id
      - modifiedAt
      - taggingStatus
      - tags
      type: object
    PaginatedBookmarks:
      example:
        bookmarks:
        - summary: summary
          createdAt: createdAt
          archived: true
          taggingStatus: success
          note: note
          assets:
          - id: id
            assetType: screenshot
          - id: id
            assetType: screenshot
          favourited: true
          modifiedAt: modifiedAt
          id: id
          title: title
          content:
            favicon: favicon
            videoAssetId: videoAssetId
            description: description
            precrawledArchiveAssetId: precrawledArchiveAssetId
            type: link
            title: title
            url: url
            fullPageArchiveAssetId: fullPageArchiveAssetId
            htmlContent: htmlContent
            crawledAt: crawledAt
            screenshotAssetId: screenshotAssetId
            imageAssetId: imageAssetId
            imageUrl: imageUrl
          tags:
          - name: name
            attachedBy: ai
            id: id
          - name: name
            attachedBy: ai
            id: id
        - summary: summary
          createdAt: createdAt
          archived: true
          taggingStatus: success
          note: note
          assets:
          - id: id
            assetType: screenshot
          - id: id
            assetType: screenshot
          favourited: true
          modifiedAt: modifiedAt
          id: id
          title: title
          content:
            favicon: favicon
            videoAssetId: videoAssetId
            description: description
            precrawledArchiveAssetId: precrawledArchiveAssetId
            type: link
            title: title
            url: url
            fullPageArchiveAssetId: fullPageArchiveAssetId
            htmlContent: htmlContent
            crawledAt: crawledAt
            screenshotAssetId: screenshotAssetId
            imageAssetId: imageAssetId
            imageUrl: imageUrl
          tags:
          - name: name
            attachedBy: ai
            id: id
          - name: name
            attachedBy: ai
            id: id
        nextCursor: nextCursor
      properties:
        bookmarks:
          items:
            $ref: '#/components/schemas/Bookmark'
          type: array
        nextCursor:
          nullable: true
          type: string
      required:
      - bookmarks
      - nextCursor
      type: object
    Cursor:
      type: string
    Highlight:
      example:
        note: note
        createdAt: createdAt
        bookmarkId: bookmarkId
        endOffset: 6.027456183070403
        startOffset: 0.8008281904610115
        color: yellow
        text: text
        id: id
        userId: userId
      properties:
        bookmarkId:
          type: string
        startOffset:
          type: number
        endOffset:
          type: number
        color:
          default: yellow
          enum:
          - yellow
          - red
          - green
          - blue
          type: string
        text:
          nullable: true
          type: string
        note:
          nullable: true
          type: string
        id:
          type: string
        userId:
          type: string
        createdAt:
          type: string
      required:
      - bookmarkId
      - createdAt
      - endOffset
      - id
      - note
      - startOffset
      - text
      - userId
      type: object
    List:
      example:
        query: query
        name: name
        icon: icon
        id: id
        type: manual
        parentId: parentId
      properties:
        id:
          type: string
        name:
          type: string
        icon:
          type: string
        parentId:
          nullable: true
          type: string
        type:
          default: manual
          enum:
          - manual
          - smart
          type: string
        query:
          nullable: true
          type: string
      required:
      - icon
      - id
      - name
      - parentId
      type: object
    Tag:
      example:
        name: name
        numBookmarks: 0.8008281904610115
        id: id
        numBookmarksByAttachedType:
          ai: 6.027456183070403
          human: 1.4658129805029452
      properties:
        id:
          type: string
        name:
          type: string
        numBookmarks:
          type: number
        numBookmarksByAttachedType:
          $ref: '#/components/schemas/Tag_numBookmarksByAttachedType'
      required:
      - id
      - name
      - numBookmarks
      - numBookmarksByAttachedType
      type: object
    PaginatedHighlights:
      example:
        nextCursor: nextCursor
        highlights:
        - note: note
          createdAt: createdAt
          bookmarkId: bookmarkId
          endOffset: 6.027456183070403
          startOffset: 0.8008281904610115
          color: yellow
          text: text
          id: id
          userId: userId
        - note: note
          createdAt: createdAt
          bookmarkId: bookmarkId
          endOffset: 6.027456183070403
          startOffset: 0.8008281904610115
          color: yellow
          text: text
          id: id
          userId: userId
      properties:
        highlights:
          items:
            $ref: '#/components/schemas/Highlight'
          type: array
        nextCursor:
          nullable: true
          type: string
      required:
      - highlights
      - nextCursor
      type: object
    _bookmarks_post_request_allOf_oneOf:
      properties:
        type:
          enum:
          - link
          type: string
        url:
          format: uri
          type: string
        precrawledArchiveId:
          type: string
      required:
      - type
      - url
      type: object
    _bookmarks_post_request_allOf_oneOf_1:
      properties:
        type:
          enum:
          - text
          type: string
        text:
          type: string
        sourceUrl:
          type: string
      required:
      - text
      - type
      type: object
    _bookmarks_post_request_allOf_oneOf_2:
      properties:
        type:
          enum:
          - asset
          type: string
        assetType:
          enum:
          - image
          - pdf
          type: string
        assetId:
          type: string
        fileName:
          type: string
        sourceUrl:
          type: string
      required:
      - assetId
      - assetType
      - type
      type: object
    _bookmarks_post_request:
      allOf:
      - properties:
          title:
            maxLength: 250
            nullable: true
            type: string
          archived:
            type: boolean
          favourited:
            type: boolean
          note:
            type: string
          summary:
            type: string
          createdAt:
            nullable: true
            type: string
        type: object
      - oneOf:
        - $ref: '#/components/schemas/_bookmarks_post_request_allOf_oneOf'
        - $ref: '#/components/schemas/_bookmarks_post_request_allOf_oneOf_1'
        - $ref: '#/components/schemas/_bookmarks_post_request_allOf_oneOf_2'
    _bookmarks__bookmarkId__patch_request:
      properties:
        archived:
          type: boolean
        favourited:
          type: boolean
        summary:
          nullable: true
          type: string
        note:
          type: string
        title:
          maxLength: 250
          nullable: true
          type: string
        createdAt:
          nullable: true
          type: string
      type: object
    _bookmarks__bookmarkId__patch_200_response:
      example:
        summary: summary
        createdAt: createdAt
        archived: true
        taggingStatus: success
        note: note
        favourited: true
        modifiedAt: modifiedAt
        id: id
        title: title
      properties:
        id:
          type: string
        createdAt:
          type: string
        modifiedAt:
          nullable: true
          type: string
        title:
          maxLength: 250
          nullable: true
          type: string
        archived:
          type: boolean
        favourited:
          type: boolean
        taggingStatus:
          enum:
          - success
          - failure
          - pending
          nullable: true
          type: string
        note:
          nullable: true
          type: string
        summary:
          nullable: true
          type: string
      required:
      - archived
      - createdAt
      - favourited
      - id
      - modifiedAt
      - taggingStatus
      type: object
    _bookmarks__bookmarkId__tags_post_request_tags_inner:
      properties:
        tagId:
          type: string
        tagName:
          type: string
      type: object
    _bookmarks__bookmarkId__tags_post_request:
      properties:
        tags:
          items:
            $ref: '#/components/schemas/_bookmarks__bookmarkId__tags_post_request_tags_inner'
          type: array
      required:
      - tags
      type: object
    _bookmarks__bookmarkId__tags_post_200_response:
      example:
        attached:
        - ieidlxygmwj87oxz5hxttoc8
        - ieidlxygmwj87oxz5hxttoc8
      properties:
        attached:
          items:
            $ref: '#/components/schemas/TagId'
          type: array
      required:
      - attached
      type: object
    _bookmarks__bookmarkId__tags_delete_200_response:
      example:
        detached:
        - ieidlxygmwj87oxz5hxttoc8
        - ieidlxygmwj87oxz5hxttoc8
      properties:
        detached:
          items:
            $ref: '#/components/schemas/TagId'
          type: array
      required:
      - detached
      type: object
    _bookmarks__bookmarkId__highlights_get_200_response:
      example:
        highlights:
        - note: note
          createdAt: createdAt
          bookmarkId: bookmarkId
          endOffset: 6.027456183070403
          startOffset: 0.8008281904610115
          color: yellow
          text: text
          id: id
          userId: userId
        - note: note
          createdAt: createdAt
          bookmarkId: bookmarkId
          endOffset: 6.027456183070403
          startOffset: 0.8008281904610115
          color: yellow
          text: text
          id: id
          userId: userId
      properties:
        highlights:
          items:
            $ref: '#/components/schemas/Highlight'
          type: array
      required:
      - highlights
      type: object
    _bookmarks__bookmarkId__assets_post_request:
      example:
        id: id
        assetType: screenshot
      properties:
        id:
          type: string
        assetType:
          enum:
          - screenshot
          - bannerImage
          - fullPageArchive
          - video
          - bookmarkAsset
          - precrawledArchive
          - unknown
          type: string
      required:
      - assetType
      - id
      type: object
    _bookmarks__bookmarkId__assets__assetId__put_request:
      properties:
        assetId:
          type: string
      required:
      - assetId
      type: object
    _lists_get_200_response:
      example:
        lists:
        - query: query
          name: name
          icon: icon
          id: id
          type: manual
          parentId: parentId
        - query: query
          name: name
          icon: icon
          id: id
          type: manual
          parentId: parentId
      properties:
        lists:
          items:
            $ref: '#/components/schemas/List'
          type: array
      required:
      - lists
      type: object
    _lists_post_request:
      properties:
        name:
          maxLength: 40
          minLength: 1
          type: string
        icon:
          type: string
        type:
          default: manual
          enum:
          - manual
          - smart
          type: string
        query:
          minLength: 1
          type: string
        parentId:
          nullable: true
          type: string
      required:
      - icon
      - name
      type: object
    _lists__listId__patch_request:
      properties:
        name:
          maxLength: 40
          minLength: 1
          type: string
        icon:
          type: string
        parentId:
          nullable: true
          type: string
        query:
          minLength: 1
          type: string
      type: object
    _tags_get_200_response:
      example:
        tags:
        - name: name
          numBookmarks: 0.8008281904610115
          id: id
          numBookmarksByAttachedType:
            ai: 6.027456183070403
            human: 1.4658129805029452
        - name: name
          numBookmarks: 0.8008281904610115
          id: id
          numBookmarksByAttachedType:
            ai: 6.027456183070403
            human: 1.4658129805029452
      properties:
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      required:
      - tags
      type: object
    _tags__tagId__patch_request:
      properties:
        name:
          type: string
      type: object
    _highlights_post_request:
      properties:
        bookmarkId:
          type: string
        startOffset:
          type: number
        endOffset:
          type: number
        color:
          default: yellow
          enum:
          - yellow
          - red
          - green
          - blue
          type: string
        text:
          nullable: true
          type: string
        note:
          nullable: true
          type: string
      required:
      - bookmarkId
      - endOffset
      - note
      - startOffset
      - text
      type: object
    _highlights__highlightId__patch_request:
      properties:
        color:
          enum:
          - yellow
          - red
          - green
          - blue
          type: string
      type: object
    Bookmark_tags_inner:
      example:
        name: name
        attachedBy: ai
        id: id
      properties:
        id:
          type: string
        name:
          type: string
        attachedBy:
          enum:
          - ai
          - human
          type: string
      required:
      - attachedBy
      - id
      - name
      type: object
    Bookmark_content_oneOf:
      example:
        favicon: favicon
        videoAssetId: videoAssetId
        description: description
        precrawledArchiveAssetId: precrawledArchiveAssetId
        type: link
        title: title
        url: url
        fullPageArchiveAssetId: fullPageArchiveAssetId
        htmlContent: htmlContent
        crawledAt: crawledAt
        screenshotAssetId: screenshotAssetId
        imageAssetId: imageAssetId
        imageUrl: imageUrl
      properties:
        type:
          enum:
          - link
          type: string
        url:
          type: string
        title:
          nullable: true
          type: string
        description:
          nullable: true
          type: string
        imageUrl:
          nullable: true
          type: string
        imageAssetId:
          nullable: true
          type: string
        screenshotAssetId:
          nullable: true
          type: string
        fullPageArchiveAssetId:
          nullable: true
          type: string
        precrawledArchiveAssetId:
          nullable: true
          type: string
        videoAssetId:
          nullable: true
          type: string
        favicon:
          nullable: true
          type: string
        htmlContent:
          nullable: true
          type: string
        crawledAt:
          nullable: true
          type: string
      required:
      - type
      - url
      type: object
    Bookmark_content_oneOf_1:
      properties:
        type:
          enum:
          - text
          type: string
        text:
          type: string
        sourceUrl:
          nullable: true
          type: string
      required:
      - text
      - type
      type: object
    Bookmark_content_oneOf_2:
      properties:
        type:
          enum:
          - asset
          type: string
        assetType:
          enum:
          - image
          - pdf
          type: string
        assetId:
          type: string
        fileName:
          nullable: true
          type: string
        sourceUrl:
          nullable: true
          type: string
      required:
      - assetId
      - assetType
      - type
      type: object
    Bookmark_content_oneOf_3:
      properties:
        type:
          enum:
          - unknown
          type: string
      required:
      - type
      type: object
    Bookmark_content:
      oneOf:
      - $ref: '#/components/schemas/Bookmark_content_oneOf'
      - $ref: '#/components/schemas/Bookmark_content_oneOf_1'
      - $ref: '#/components/schemas/Bookmark_content_oneOf_2'
      - $ref: '#/components/schemas/Bookmark_content_oneOf_3'
    Tag_numBookmarksByAttachedType:
      example:
        ai: 6.027456183070403
        human: 1.4658129805029452
      properties:
        ai:
          type: number
        human:
          type: number
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
