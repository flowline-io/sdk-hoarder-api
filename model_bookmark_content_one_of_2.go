/*
Hoarder API

The API for the Hoarder app

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BookmarkContentOneOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BookmarkContentOneOf2{}

// BookmarkContentOneOf2 struct for BookmarkContentOneOf2
type BookmarkContentOneOf2 struct {
	Type string `json:"type"`
	AssetType string `json:"assetType"`
	AssetId string `json:"assetId"`
	FileName NullableString `json:"fileName,omitempty"`
	SourceUrl NullableString `json:"sourceUrl,omitempty"`
}

type _BookmarkContentOneOf2 BookmarkContentOneOf2

// NewBookmarkContentOneOf2 instantiates a new BookmarkContentOneOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookmarkContentOneOf2(type_ string, assetType string, assetId string) *BookmarkContentOneOf2 {
	this := BookmarkContentOneOf2{}
	this.Type = type_
	this.AssetType = assetType
	this.AssetId = assetId
	return &this
}

// NewBookmarkContentOneOf2WithDefaults instantiates a new BookmarkContentOneOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookmarkContentOneOf2WithDefaults() *BookmarkContentOneOf2 {
	this := BookmarkContentOneOf2{}
	return &this
}

// GetType returns the Type field value
func (o *BookmarkContentOneOf2) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BookmarkContentOneOf2) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BookmarkContentOneOf2) SetType(v string) {
	o.Type = v
}

// GetAssetType returns the AssetType field value
func (o *BookmarkContentOneOf2) GetAssetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetType
}

// GetAssetTypeOk returns a tuple with the AssetType field value
// and a boolean to check if the value has been set.
func (o *BookmarkContentOneOf2) GetAssetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetType, true
}

// SetAssetType sets field value
func (o *BookmarkContentOneOf2) SetAssetType(v string) {
	o.AssetType = v
}

// GetAssetId returns the AssetId field value
func (o *BookmarkContentOneOf2) GetAssetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssetId
}

// GetAssetIdOk returns a tuple with the AssetId field value
// and a boolean to check if the value has been set.
func (o *BookmarkContentOneOf2) GetAssetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssetId, true
}

// SetAssetId sets field value
func (o *BookmarkContentOneOf2) SetAssetId(v string) {
	o.AssetId = v
}

// GetFileName returns the FileName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BookmarkContentOneOf2) GetFileName() string {
	if o == nil || IsNil(o.FileName.Get()) {
		var ret string
		return ret
	}
	return *o.FileName.Get()
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BookmarkContentOneOf2) GetFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileName.Get(), o.FileName.IsSet()
}

// HasFileName returns a boolean if a field has been set.
func (o *BookmarkContentOneOf2) HasFileName() bool {
	if o != nil && o.FileName.IsSet() {
		return true
	}

	return false
}

// SetFileName gets a reference to the given NullableString and assigns it to the FileName field.
func (o *BookmarkContentOneOf2) SetFileName(v string) {
	o.FileName.Set(&v)
}
// SetFileNameNil sets the value for FileName to be an explicit nil
func (o *BookmarkContentOneOf2) SetFileNameNil() {
	o.FileName.Set(nil)
}

// UnsetFileName ensures that no value is present for FileName, not even an explicit nil
func (o *BookmarkContentOneOf2) UnsetFileName() {
	o.FileName.Unset()
}

// GetSourceUrl returns the SourceUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BookmarkContentOneOf2) GetSourceUrl() string {
	if o == nil || IsNil(o.SourceUrl.Get()) {
		var ret string
		return ret
	}
	return *o.SourceUrl.Get()
}

// GetSourceUrlOk returns a tuple with the SourceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BookmarkContentOneOf2) GetSourceUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceUrl.Get(), o.SourceUrl.IsSet()
}

// HasSourceUrl returns a boolean if a field has been set.
func (o *BookmarkContentOneOf2) HasSourceUrl() bool {
	if o != nil && o.SourceUrl.IsSet() {
		return true
	}

	return false
}

// SetSourceUrl gets a reference to the given NullableString and assigns it to the SourceUrl field.
func (o *BookmarkContentOneOf2) SetSourceUrl(v string) {
	o.SourceUrl.Set(&v)
}
// SetSourceUrlNil sets the value for SourceUrl to be an explicit nil
func (o *BookmarkContentOneOf2) SetSourceUrlNil() {
	o.SourceUrl.Set(nil)
}

// UnsetSourceUrl ensures that no value is present for SourceUrl, not even an explicit nil
func (o *BookmarkContentOneOf2) UnsetSourceUrl() {
	o.SourceUrl.Unset()
}

func (o BookmarkContentOneOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BookmarkContentOneOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["assetType"] = o.AssetType
	toSerialize["assetId"] = o.AssetId
	if o.FileName.IsSet() {
		toSerialize["fileName"] = o.FileName.Get()
	}
	if o.SourceUrl.IsSet() {
		toSerialize["sourceUrl"] = o.SourceUrl.Get()
	}
	return toSerialize, nil
}

func (o *BookmarkContentOneOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"assetType",
		"assetId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBookmarkContentOneOf2 := _BookmarkContentOneOf2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBookmarkContentOneOf2)

	if err != nil {
		return err
	}

	*o = BookmarkContentOneOf2(varBookmarkContentOneOf2)

	return err
}

type NullableBookmarkContentOneOf2 struct {
	value *BookmarkContentOneOf2
	isSet bool
}

func (v NullableBookmarkContentOneOf2) Get() *BookmarkContentOneOf2 {
	return v.value
}

func (v *NullableBookmarkContentOneOf2) Set(val *BookmarkContentOneOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableBookmarkContentOneOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableBookmarkContentOneOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookmarkContentOneOf2(val *BookmarkContentOneOf2) *NullableBookmarkContentOneOf2 {
	return &NullableBookmarkContentOneOf2{value: val, isSet: true}
}

func (v NullableBookmarkContentOneOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookmarkContentOneOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


