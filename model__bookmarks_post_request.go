/*
Hoarder API

The API for the Hoarder app

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// BookmarksPostRequest - struct for BookmarksPostRequest
type BookmarksPostRequest struct {
	BookmarksPostRequestOneOf *BookmarksPostRequestOneOf
	BookmarksPostRequestOneOf1 *BookmarksPostRequestOneOf1
	BookmarksPostRequestOneOf2 *BookmarksPostRequestOneOf2
	BookmarksPostRequestOneOf3 *BookmarksPostRequestOneOf3
}

// BookmarksPostRequestOneOfAsBookmarksPostRequest is a convenience function that returns BookmarksPostRequestOneOf wrapped in BookmarksPostRequest
func BookmarksPostRequestOneOfAsBookmarksPostRequest(v *BookmarksPostRequestOneOf) BookmarksPostRequest {
	return BookmarksPostRequest{
		BookmarksPostRequestOneOf: v,
	}
}

// BookmarksPostRequestOneOf1AsBookmarksPostRequest is a convenience function that returns BookmarksPostRequestOneOf1 wrapped in BookmarksPostRequest
func BookmarksPostRequestOneOf1AsBookmarksPostRequest(v *BookmarksPostRequestOneOf1) BookmarksPostRequest {
	return BookmarksPostRequest{
		BookmarksPostRequestOneOf1: v,
	}
}

// BookmarksPostRequestOneOf2AsBookmarksPostRequest is a convenience function that returns BookmarksPostRequestOneOf2 wrapped in BookmarksPostRequest
func BookmarksPostRequestOneOf2AsBookmarksPostRequest(v *BookmarksPostRequestOneOf2) BookmarksPostRequest {
	return BookmarksPostRequest{
		BookmarksPostRequestOneOf2: v,
	}
}

// BookmarksPostRequestOneOf3AsBookmarksPostRequest is a convenience function that returns BookmarksPostRequestOneOf3 wrapped in BookmarksPostRequest
func BookmarksPostRequestOneOf3AsBookmarksPostRequest(v *BookmarksPostRequestOneOf3) BookmarksPostRequest {
	return BookmarksPostRequest{
		BookmarksPostRequestOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *BookmarksPostRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BookmarksPostRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.BookmarksPostRequestOneOf)
	if err == nil {
		jsonBookmarksPostRequestOneOf, _ := json.Marshal(dst.BookmarksPostRequestOneOf)
		if string(jsonBookmarksPostRequestOneOf) == "{}" { // empty struct
			dst.BookmarksPostRequestOneOf = nil
		} else {
			if err = validator.Validate(dst.BookmarksPostRequestOneOf); err != nil {
				dst.BookmarksPostRequestOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.BookmarksPostRequestOneOf = nil
	}

	// try to unmarshal data into BookmarksPostRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.BookmarksPostRequestOneOf1)
	if err == nil {
		jsonBookmarksPostRequestOneOf1, _ := json.Marshal(dst.BookmarksPostRequestOneOf1)
		if string(jsonBookmarksPostRequestOneOf1) == "{}" { // empty struct
			dst.BookmarksPostRequestOneOf1 = nil
		} else {
			if err = validator.Validate(dst.BookmarksPostRequestOneOf1); err != nil {
				dst.BookmarksPostRequestOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.BookmarksPostRequestOneOf1 = nil
	}

	// try to unmarshal data into BookmarksPostRequestOneOf2
	err = newStrictDecoder(data).Decode(&dst.BookmarksPostRequestOneOf2)
	if err == nil {
		jsonBookmarksPostRequestOneOf2, _ := json.Marshal(dst.BookmarksPostRequestOneOf2)
		if string(jsonBookmarksPostRequestOneOf2) == "{}" { // empty struct
			dst.BookmarksPostRequestOneOf2 = nil
		} else {
			if err = validator.Validate(dst.BookmarksPostRequestOneOf2); err != nil {
				dst.BookmarksPostRequestOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.BookmarksPostRequestOneOf2 = nil
	}

	// try to unmarshal data into BookmarksPostRequestOneOf3
	err = newStrictDecoder(data).Decode(&dst.BookmarksPostRequestOneOf3)
	if err == nil {
		jsonBookmarksPostRequestOneOf3, _ := json.Marshal(dst.BookmarksPostRequestOneOf3)
		if string(jsonBookmarksPostRequestOneOf3) == "{}" { // empty struct
			dst.BookmarksPostRequestOneOf3 = nil
		} else {
			if err = validator.Validate(dst.BookmarksPostRequestOneOf3); err != nil {
				dst.BookmarksPostRequestOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.BookmarksPostRequestOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BookmarksPostRequestOneOf = nil
		dst.BookmarksPostRequestOneOf1 = nil
		dst.BookmarksPostRequestOneOf2 = nil
		dst.BookmarksPostRequestOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BookmarksPostRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BookmarksPostRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BookmarksPostRequest) MarshalJSON() ([]byte, error) {
	if src.BookmarksPostRequestOneOf != nil {
		return json.Marshal(&src.BookmarksPostRequestOneOf)
	}

	if src.BookmarksPostRequestOneOf1 != nil {
		return json.Marshal(&src.BookmarksPostRequestOneOf1)
	}

	if src.BookmarksPostRequestOneOf2 != nil {
		return json.Marshal(&src.BookmarksPostRequestOneOf2)
	}

	if src.BookmarksPostRequestOneOf3 != nil {
		return json.Marshal(&src.BookmarksPostRequestOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BookmarksPostRequest) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BookmarksPostRequestOneOf != nil {
		return obj.BookmarksPostRequestOneOf
	}

	if obj.BookmarksPostRequestOneOf1 != nil {
		return obj.BookmarksPostRequestOneOf1
	}

	if obj.BookmarksPostRequestOneOf2 != nil {
		return obj.BookmarksPostRequestOneOf2
	}

	if obj.BookmarksPostRequestOneOf3 != nil {
		return obj.BookmarksPostRequestOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableBookmarksPostRequest struct {
	value *BookmarksPostRequest
	isSet bool
}

func (v NullableBookmarksPostRequest) Get() *BookmarksPostRequest {
	return v.value
}

func (v *NullableBookmarksPostRequest) Set(val *BookmarksPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBookmarksPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBookmarksPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookmarksPostRequest(val *BookmarksPostRequest) *NullableBookmarksPostRequest {
	return &NullableBookmarksPostRequest{value: val, isSet: true}
}

func (v NullableBookmarksPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookmarksPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


