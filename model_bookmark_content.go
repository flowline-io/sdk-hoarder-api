/*
Hoarder API

The API for the Hoarder app

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// BookmarkContent - struct for BookmarkContent
type BookmarkContent struct {
	BookmarkContentOneOf  *BookmarkContentOneOf
	BookmarkContentOneOf1 *BookmarkContentOneOf1
	BookmarkContentOneOf2 *BookmarkContentOneOf2
	BookmarkContentOneOf3 *BookmarkContentOneOf3
}

// BookmarkContentOneOfAsBookmarkContent is a convenience function that returns BookmarkContentOneOf wrapped in BookmarkContent
func BookmarkContentOneOfAsBookmarkContent(v *BookmarkContentOneOf) BookmarkContent {
	return BookmarkContent{
		BookmarkContentOneOf: v,
	}
}

// BookmarkContentOneOf1AsBookmarkContent is a convenience function that returns BookmarkContentOneOf1 wrapped in BookmarkContent
func BookmarkContentOneOf1AsBookmarkContent(v *BookmarkContentOneOf1) BookmarkContent {
	return BookmarkContent{
		BookmarkContentOneOf1: v,
	}
}

// BookmarkContentOneOf2AsBookmarkContent is a convenience function that returns BookmarkContentOneOf2 wrapped in BookmarkContent
func BookmarkContentOneOf2AsBookmarkContent(v *BookmarkContentOneOf2) BookmarkContent {
	return BookmarkContent{
		BookmarkContentOneOf2: v,
	}
}

// BookmarkContentOneOf3AsBookmarkContent is a convenience function that returns BookmarkContentOneOf3 wrapped in BookmarkContent
func BookmarkContentOneOf3AsBookmarkContent(v *BookmarkContentOneOf3) BookmarkContent {
	return BookmarkContent{
		BookmarkContentOneOf3: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BookmarkContent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BookmarkContentOneOf
	err = newStrictDecoder(data).Decode(&dst.BookmarkContentOneOf)
	if err == nil {
		jsonBookmarkContentOneOf, _ := json.Marshal(dst.BookmarkContentOneOf)
		if string(jsonBookmarkContentOneOf) == "{}" { // empty struct
			dst.BookmarkContentOneOf = nil
		} else {
			if err = validator.Validate(dst.BookmarkContentOneOf); err != nil {
				dst.BookmarkContentOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.BookmarkContentOneOf = nil
	}

	// try to unmarshal data into BookmarkContentOneOf1
	err = newStrictDecoder(data).Decode(&dst.BookmarkContentOneOf1)
	if err == nil {
		jsonBookmarkContentOneOf1, _ := json.Marshal(dst.BookmarkContentOneOf1)
		if string(jsonBookmarkContentOneOf1) == "{}" { // empty struct
			dst.BookmarkContentOneOf1 = nil
		} else {
			if err = validator.Validate(dst.BookmarkContentOneOf1); err != nil {
				dst.BookmarkContentOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.BookmarkContentOneOf1 = nil
	}

	// try to unmarshal data into BookmarkContentOneOf2
	err = newStrictDecoder(data).Decode(&dst.BookmarkContentOneOf2)
	if err == nil {
		jsonBookmarkContentOneOf2, _ := json.Marshal(dst.BookmarkContentOneOf2)
		if string(jsonBookmarkContentOneOf2) == "{}" { // empty struct
			dst.BookmarkContentOneOf2 = nil
		} else {
			if err = validator.Validate(dst.BookmarkContentOneOf2); err != nil {
				dst.BookmarkContentOneOf2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.BookmarkContentOneOf2 = nil
	}

	// try to unmarshal data into BookmarkContentOneOf3
	err = newStrictDecoder(data).Decode(&dst.BookmarkContentOneOf3)
	if err == nil {
		jsonBookmarkContentOneOf3, _ := json.Marshal(dst.BookmarkContentOneOf3)
		if string(jsonBookmarkContentOneOf3) == "{}" { // empty struct
			dst.BookmarkContentOneOf3 = nil
		} else {
			if err = validator.Validate(dst.BookmarkContentOneOf3); err != nil {
				dst.BookmarkContentOneOf3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.BookmarkContentOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BookmarkContentOneOf = nil
		dst.BookmarkContentOneOf1 = nil
		dst.BookmarkContentOneOf2 = nil
		dst.BookmarkContentOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(BookmarkContent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(BookmarkContent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BookmarkContent) MarshalJSON() ([]byte, error) {
	if src.BookmarkContentOneOf != nil {
		return json.Marshal(&src.BookmarkContentOneOf)
	}

	if src.BookmarkContentOneOf1 != nil {
		return json.Marshal(&src.BookmarkContentOneOf1)
	}

	if src.BookmarkContentOneOf2 != nil {
		return json.Marshal(&src.BookmarkContentOneOf2)
	}

	if src.BookmarkContentOneOf3 != nil {
		return json.Marshal(&src.BookmarkContentOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BookmarkContent) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BookmarkContentOneOf != nil {
		return obj.BookmarkContentOneOf
	}

	if obj.BookmarkContentOneOf1 != nil {
		return obj.BookmarkContentOneOf1
	}

	if obj.BookmarkContentOneOf2 != nil {
		return obj.BookmarkContentOneOf2
	}

	if obj.BookmarkContentOneOf3 != nil {
		return obj.BookmarkContentOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableBookmarkContent struct {
	value *BookmarkContent
	isSet bool
}

func (v NullableBookmarkContent) Get() *BookmarkContent {
	return v.value
}

func (v *NullableBookmarkContent) Set(val *BookmarkContent) {
	v.value = val
	v.isSet = true
}

func (v NullableBookmarkContent) IsSet() bool {
	return v.isSet
}

func (v *NullableBookmarkContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookmarkContent(val *BookmarkContent) *NullableBookmarkContent {
	return &NullableBookmarkContent{value: val, isSet: true}
}

func (v NullableBookmarkContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookmarkContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
