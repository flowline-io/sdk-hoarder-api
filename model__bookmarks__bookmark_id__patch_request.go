/*
Hoarder API

The API for the Hoarder app

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BookmarksBookmarkIdPatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BookmarksBookmarkIdPatchRequest{}

// BookmarksBookmarkIdPatchRequest struct for BookmarksBookmarkIdPatchRequest
type BookmarksBookmarkIdPatchRequest struct {
	Archived   *bool          `json:"archived,omitempty"`
	Favourited *bool          `json:"favourited,omitempty"`
	Summary    NullableString `json:"summary,omitempty"`
	Note       *string        `json:"note,omitempty"`
	Title      NullableString `json:"title,omitempty"`
	CreatedAt  *string        `json:"createdAt,omitempty"`
}

// NewBookmarksBookmarkIdPatchRequest instantiates a new BookmarksBookmarkIdPatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookmarksBookmarkIdPatchRequest() *BookmarksBookmarkIdPatchRequest {
	this := BookmarksBookmarkIdPatchRequest{}
	return &this
}

// NewBookmarksBookmarkIdPatchRequestWithDefaults instantiates a new BookmarksBookmarkIdPatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookmarksBookmarkIdPatchRequestWithDefaults() *BookmarksBookmarkIdPatchRequest {
	this := BookmarksBookmarkIdPatchRequest{}
	return &this
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *BookmarksBookmarkIdPatchRequest) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookmarksBookmarkIdPatchRequest) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *BookmarksBookmarkIdPatchRequest) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *BookmarksBookmarkIdPatchRequest) SetArchived(v bool) {
	o.Archived = &v
}

// GetFavourited returns the Favourited field value if set, zero value otherwise.
func (o *BookmarksBookmarkIdPatchRequest) GetFavourited() bool {
	if o == nil || IsNil(o.Favourited) {
		var ret bool
		return ret
	}
	return *o.Favourited
}

// GetFavouritedOk returns a tuple with the Favourited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookmarksBookmarkIdPatchRequest) GetFavouritedOk() (*bool, bool) {
	if o == nil || IsNil(o.Favourited) {
		return nil, false
	}
	return o.Favourited, true
}

// HasFavourited returns a boolean if a field has been set.
func (o *BookmarksBookmarkIdPatchRequest) HasFavourited() bool {
	if o != nil && !IsNil(o.Favourited) {
		return true
	}

	return false
}

// SetFavourited gets a reference to the given bool and assigns it to the Favourited field.
func (o *BookmarksBookmarkIdPatchRequest) SetFavourited(v bool) {
	o.Favourited = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BookmarksBookmarkIdPatchRequest) GetSummary() string {
	if o == nil || IsNil(o.Summary.Get()) {
		var ret string
		return ret
	}
	return *o.Summary.Get()
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BookmarksBookmarkIdPatchRequest) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Summary.Get(), o.Summary.IsSet()
}

// HasSummary returns a boolean if a field has been set.
func (o *BookmarksBookmarkIdPatchRequest) HasSummary() bool {
	if o != nil && o.Summary.IsSet() {
		return true
	}

	return false
}

// SetSummary gets a reference to the given NullableString and assigns it to the Summary field.
func (o *BookmarksBookmarkIdPatchRequest) SetSummary(v string) {
	o.Summary.Set(&v)
}

// SetSummaryNil sets the value for Summary to be an explicit nil
func (o *BookmarksBookmarkIdPatchRequest) SetSummaryNil() {
	o.Summary.Set(nil)
}

// UnsetSummary ensures that no value is present for Summary, not even an explicit nil
func (o *BookmarksBookmarkIdPatchRequest) UnsetSummary() {
	o.Summary.Unset()
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *BookmarksBookmarkIdPatchRequest) GetNote() string {
	if o == nil || IsNil(o.Note) {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookmarksBookmarkIdPatchRequest) GetNoteOk() (*string, bool) {
	if o == nil || IsNil(o.Note) {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *BookmarksBookmarkIdPatchRequest) HasNote() bool {
	if o != nil && !IsNil(o.Note) {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *BookmarksBookmarkIdPatchRequest) SetNote(v string) {
	o.Note = &v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BookmarksBookmarkIdPatchRequest) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BookmarksBookmarkIdPatchRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *BookmarksBookmarkIdPatchRequest) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *BookmarksBookmarkIdPatchRequest) SetTitle(v string) {
	o.Title.Set(&v)
}

// SetTitleNil sets the value for Title to be an explicit nil
func (o *BookmarksBookmarkIdPatchRequest) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *BookmarksBookmarkIdPatchRequest) UnsetTitle() {
	o.Title.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *BookmarksBookmarkIdPatchRequest) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookmarksBookmarkIdPatchRequest) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *BookmarksBookmarkIdPatchRequest) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *BookmarksBookmarkIdPatchRequest) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

func (o BookmarksBookmarkIdPatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BookmarksBookmarkIdPatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.Favourited) {
		toSerialize["favourited"] = o.Favourited
	}
	if o.Summary.IsSet() {
		toSerialize["summary"] = o.Summary.Get()
	}
	if !IsNil(o.Note) {
		toSerialize["note"] = o.Note
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	return toSerialize, nil
}

type NullableBookmarksBookmarkIdPatchRequest struct {
	value *BookmarksBookmarkIdPatchRequest
	isSet bool
}

func (v NullableBookmarksBookmarkIdPatchRequest) Get() *BookmarksBookmarkIdPatchRequest {
	return v.value
}

func (v *NullableBookmarksBookmarkIdPatchRequest) Set(val *BookmarksBookmarkIdPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableBookmarksBookmarkIdPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableBookmarksBookmarkIdPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookmarksBookmarkIdPatchRequest(val *BookmarksBookmarkIdPatchRequest) *NullableBookmarksBookmarkIdPatchRequest {
	return &NullableBookmarksBookmarkIdPatchRequest{value: val, isSet: true}
}

func (v NullableBookmarksBookmarkIdPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookmarksBookmarkIdPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
