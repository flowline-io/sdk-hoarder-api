/*
Hoarder API

The API for the Hoarder app

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the TagsGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagsGet200Response{}

// TagsGet200Response struct for TagsGet200Response
type TagsGet200Response struct {
	Tags []Tag `json:"tags"`
}

type _TagsGet200Response TagsGet200Response

// NewTagsGet200Response instantiates a new TagsGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagsGet200Response(tags []Tag) *TagsGet200Response {
	this := TagsGet200Response{}
	this.Tags = tags
	return &this
}

// NewTagsGet200ResponseWithDefaults instantiates a new TagsGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagsGet200ResponseWithDefaults() *TagsGet200Response {
	this := TagsGet200Response{}
	return &this
}

// GetTags returns the Tags field value
func (o *TagsGet200Response) GetTags() []Tag {
	if o == nil {
		var ret []Tag
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *TagsGet200Response) GetTagsOk() ([]Tag, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *TagsGet200Response) SetTags(v []Tag) {
	o.Tags = v
}

func (o TagsGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagsGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tags"] = o.Tags
	return toSerialize, nil
}

func (o *TagsGet200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagsGet200Response := _TagsGet200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTagsGet200Response)

	if err != nil {
		return err
	}

	*o = TagsGet200Response(varTagsGet200Response)

	return err
}

type NullableTagsGet200Response struct {
	value *TagsGet200Response
	isSet bool
}

func (v NullableTagsGet200Response) Get() *TagsGet200Response {
	return v.value
}

func (v *NullableTagsGet200Response) Set(val *TagsGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTagsGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTagsGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagsGet200Response(val *TagsGet200Response) *NullableTagsGet200Response {
	return &NullableTagsGet200Response{value: val, isSet: true}
}

func (v NullableTagsGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagsGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
