/*
Hoarder API

The API for the Hoarder app

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ListsGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListsGet200Response{}

// ListsGet200Response struct for ListsGet200Response
type ListsGet200Response struct {
	Lists []List `json:"lists"`
}

type _ListsGet200Response ListsGet200Response

// NewListsGet200Response instantiates a new ListsGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListsGet200Response(lists []List) *ListsGet200Response {
	this := ListsGet200Response{}
	this.Lists = lists
	return &this
}

// NewListsGet200ResponseWithDefaults instantiates a new ListsGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListsGet200ResponseWithDefaults() *ListsGet200Response {
	this := ListsGet200Response{}
	return &this
}

// GetLists returns the Lists field value
func (o *ListsGet200Response) GetLists() []List {
	if o == nil {
		var ret []List
		return ret
	}

	return o.Lists
}

// GetListsOk returns a tuple with the Lists field value
// and a boolean to check if the value has been set.
func (o *ListsGet200Response) GetListsOk() ([]List, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lists, true
}

// SetLists sets field value
func (o *ListsGet200Response) SetLists(v []List) {
	o.Lists = v
}

func (o ListsGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListsGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lists"] = o.Lists
	return toSerialize, nil
}

func (o *ListsGet200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lists",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListsGet200Response := _ListsGet200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListsGet200Response)

	if err != nil {
		return err
	}

	*o = ListsGet200Response(varListsGet200Response)

	return err
}

type NullableListsGet200Response struct {
	value *ListsGet200Response
	isSet bool
}

func (v NullableListsGet200Response) Get() *ListsGet200Response {
	return v.value
}

func (v *NullableListsGet200Response) Set(val *ListsGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableListsGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableListsGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListsGet200Response(val *ListsGet200Response) *NullableListsGet200Response {
	return &NullableListsGet200Response{value: val, isSet: true}
}

func (v NullableListsGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListsGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
