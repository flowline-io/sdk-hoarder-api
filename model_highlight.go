/*
Hoarder API

The API for the Hoarder app

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Highlight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Highlight{}

// Highlight struct for Highlight
type Highlight struct {
	BookmarkId string `json:"bookmarkId"`
	StartOffset float32 `json:"startOffset"`
	EndOffset float32 `json:"endOffset"`
	Color *string `json:"color,omitempty"`
	Text NullableString `json:"text"`
	Note NullableString `json:"note"`
	Id string `json:"id"`
	UserId string `json:"userId"`
	CreatedAt string `json:"createdAt"`
}

type _Highlight Highlight

// NewHighlight instantiates a new Highlight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHighlight(bookmarkId string, startOffset float32, endOffset float32, text NullableString, note NullableString, id string, userId string, createdAt string) *Highlight {
	this := Highlight{}
	this.BookmarkId = bookmarkId
	this.StartOffset = startOffset
	this.EndOffset = endOffset
	var color string = "yellow"
	this.Color = &color
	this.Text = text
	this.Note = note
	this.Id = id
	this.UserId = userId
	this.CreatedAt = createdAt
	return &this
}

// NewHighlightWithDefaults instantiates a new Highlight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHighlightWithDefaults() *Highlight {
	this := Highlight{}
	var color string = "yellow"
	this.Color = &color
	return &this
}

// GetBookmarkId returns the BookmarkId field value
func (o *Highlight) GetBookmarkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BookmarkId
}

// GetBookmarkIdOk returns a tuple with the BookmarkId field value
// and a boolean to check if the value has been set.
func (o *Highlight) GetBookmarkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BookmarkId, true
}

// SetBookmarkId sets field value
func (o *Highlight) SetBookmarkId(v string) {
	o.BookmarkId = v
}

// GetStartOffset returns the StartOffset field value
func (o *Highlight) GetStartOffset() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.StartOffset
}

// GetStartOffsetOk returns a tuple with the StartOffset field value
// and a boolean to check if the value has been set.
func (o *Highlight) GetStartOffsetOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartOffset, true
}

// SetStartOffset sets field value
func (o *Highlight) SetStartOffset(v float32) {
	o.StartOffset = v
}

// GetEndOffset returns the EndOffset field value
func (o *Highlight) GetEndOffset() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.EndOffset
}

// GetEndOffsetOk returns a tuple with the EndOffset field value
// and a boolean to check if the value has been set.
func (o *Highlight) GetEndOffsetOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndOffset, true
}

// SetEndOffset sets field value
func (o *Highlight) SetEndOffset(v float32) {
	o.EndOffset = v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *Highlight) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Highlight) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *Highlight) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *Highlight) SetColor(v string) {
	o.Color = &v
}

// GetText returns the Text field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Highlight) GetText() string {
	if o == nil || o.Text.Get() == nil {
		var ret string
		return ret
	}

	return *o.Text.Get()
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Highlight) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Text.Get(), o.Text.IsSet()
}

// SetText sets field value
func (o *Highlight) SetText(v string) {
	o.Text.Set(&v)
}

// GetNote returns the Note field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Highlight) GetNote() string {
	if o == nil || o.Note.Get() == nil {
		var ret string
		return ret
	}

	return *o.Note.Get()
}

// GetNoteOk returns a tuple with the Note field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Highlight) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Note.Get(), o.Note.IsSet()
}

// SetNote sets field value
func (o *Highlight) SetNote(v string) {
	o.Note.Set(&v)
}

// GetId returns the Id field value
func (o *Highlight) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Highlight) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Highlight) SetId(v string) {
	o.Id = v
}

// GetUserId returns the UserId field value
func (o *Highlight) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Highlight) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Highlight) SetUserId(v string) {
	o.UserId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Highlight) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Highlight) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Highlight) SetCreatedAt(v string) {
	o.CreatedAt = v
}

func (o Highlight) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Highlight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bookmarkId"] = o.BookmarkId
	toSerialize["startOffset"] = o.StartOffset
	toSerialize["endOffset"] = o.EndOffset
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	toSerialize["text"] = o.Text.Get()
	toSerialize["note"] = o.Note.Get()
	toSerialize["id"] = o.Id
	toSerialize["userId"] = o.UserId
	toSerialize["createdAt"] = o.CreatedAt
	return toSerialize, nil
}

func (o *Highlight) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bookmarkId",
		"startOffset",
		"endOffset",
		"text",
		"note",
		"id",
		"userId",
		"createdAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHighlight := _Highlight{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHighlight)

	if err != nil {
		return err
	}

	*o = Highlight(varHighlight)

	return err
}

type NullableHighlight struct {
	value *Highlight
	isSet bool
}

func (v NullableHighlight) Get() *Highlight {
	return v.value
}

func (v *NullableHighlight) Set(val *Highlight) {
	v.value = val
	v.isSet = true
}

func (v NullableHighlight) IsSet() bool {
	return v.isSet
}

func (v *NullableHighlight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHighlight(val *Highlight) *NullableHighlight {
	return &NullableHighlight{value: val, isSet: true}
}

func (v NullableHighlight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHighlight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


