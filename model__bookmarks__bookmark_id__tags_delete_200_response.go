/*
Hoarder API

The API for the Hoarder app

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BookmarksBookmarkIdTagsDelete200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BookmarksBookmarkIdTagsDelete200Response{}

// BookmarksBookmarkIdTagsDelete200Response struct for BookmarksBookmarkIdTagsDelete200Response
type BookmarksBookmarkIdTagsDelete200Response struct {
	Detached []string `json:"detached"`
}

type _BookmarksBookmarkIdTagsDelete200Response BookmarksBookmarkIdTagsDelete200Response

// NewBookmarksBookmarkIdTagsDelete200Response instantiates a new BookmarksBookmarkIdTagsDelete200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookmarksBookmarkIdTagsDelete200Response(detached []string) *BookmarksBookmarkIdTagsDelete200Response {
	this := BookmarksBookmarkIdTagsDelete200Response{}
	this.Detached = detached
	return &this
}

// NewBookmarksBookmarkIdTagsDelete200ResponseWithDefaults instantiates a new BookmarksBookmarkIdTagsDelete200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookmarksBookmarkIdTagsDelete200ResponseWithDefaults() *BookmarksBookmarkIdTagsDelete200Response {
	this := BookmarksBookmarkIdTagsDelete200Response{}
	return &this
}

// GetDetached returns the Detached field value
func (o *BookmarksBookmarkIdTagsDelete200Response) GetDetached() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Detached
}

// GetDetachedOk returns a tuple with the Detached field value
// and a boolean to check if the value has been set.
func (o *BookmarksBookmarkIdTagsDelete200Response) GetDetachedOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Detached, true
}

// SetDetached sets field value
func (o *BookmarksBookmarkIdTagsDelete200Response) SetDetached(v []string) {
	o.Detached = v
}

func (o BookmarksBookmarkIdTagsDelete200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BookmarksBookmarkIdTagsDelete200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["detached"] = o.Detached
	return toSerialize, nil
}

func (o *BookmarksBookmarkIdTagsDelete200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"detached",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBookmarksBookmarkIdTagsDelete200Response := _BookmarksBookmarkIdTagsDelete200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBookmarksBookmarkIdTagsDelete200Response)

	if err != nil {
		return err
	}

	*o = BookmarksBookmarkIdTagsDelete200Response(varBookmarksBookmarkIdTagsDelete200Response)

	return err
}

type NullableBookmarksBookmarkIdTagsDelete200Response struct {
	value *BookmarksBookmarkIdTagsDelete200Response
	isSet bool
}

func (v NullableBookmarksBookmarkIdTagsDelete200Response) Get() *BookmarksBookmarkIdTagsDelete200Response {
	return v.value
}

func (v *NullableBookmarksBookmarkIdTagsDelete200Response) Set(val *BookmarksBookmarkIdTagsDelete200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableBookmarksBookmarkIdTagsDelete200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableBookmarksBookmarkIdTagsDelete200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookmarksBookmarkIdTagsDelete200Response(val *BookmarksBookmarkIdTagsDelete200Response) *NullableBookmarksBookmarkIdTagsDelete200Response {
	return &NullableBookmarksBookmarkIdTagsDelete200Response{value: val, isSet: true}
}

func (v NullableBookmarksBookmarkIdTagsDelete200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookmarksBookmarkIdTagsDelete200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


