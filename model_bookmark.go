/*
Hoarder API

The API for the Hoarder app

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Bookmark type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Bookmark{}

// Bookmark struct for Bookmark
type Bookmark struct {
	Id string `json:"id"`
	CreatedAt string `json:"createdAt"`
	ModifiedAt NullableString `json:"modifiedAt"`
	Title NullableString `json:"title,omitempty"`
	Archived bool `json:"archived"`
	Favourited bool `json:"favourited"`
	TaggingStatus NullableString `json:"taggingStatus"`
	Note NullableString `json:"note,omitempty"`
	Summary NullableString `json:"summary,omitempty"`
	Tags []BookmarkTagsInner `json:"tags"`
	Content BookmarkContent `json:"content"`
	Assets []BookmarksBookmarkIdAssetsPostRequest `json:"assets"`
}

type _Bookmark Bookmark

// NewBookmark instantiates a new Bookmark object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookmark(id string, createdAt string, modifiedAt NullableString, archived bool, favourited bool, taggingStatus NullableString, tags []BookmarkTagsInner, content BookmarkContent, assets []BookmarksBookmarkIdAssetsPostRequest) *Bookmark {
	this := Bookmark{}
	this.Id = id
	this.CreatedAt = createdAt
	this.ModifiedAt = modifiedAt
	this.Archived = archived
	this.Favourited = favourited
	this.TaggingStatus = taggingStatus
	this.Tags = tags
	this.Content = content
	this.Assets = assets
	return &this
}

// NewBookmarkWithDefaults instantiates a new Bookmark object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookmarkWithDefaults() *Bookmark {
	this := Bookmark{}
	return &this
}

// GetId returns the Id field value
func (o *Bookmark) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Bookmark) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Bookmark) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Bookmark) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Bookmark) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Bookmark) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetModifiedAt returns the ModifiedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Bookmark) GetModifiedAt() string {
	if o == nil || o.ModifiedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.ModifiedAt.Get()
}

// GetModifiedAtOk returns a tuple with the ModifiedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bookmark) GetModifiedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifiedAt.Get(), o.ModifiedAt.IsSet()
}

// SetModifiedAt sets field value
func (o *Bookmark) SetModifiedAt(v string) {
	o.ModifiedAt.Set(&v)
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bookmark) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bookmark) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *Bookmark) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *Bookmark) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *Bookmark) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *Bookmark) UnsetTitle() {
	o.Title.Unset()
}

// GetArchived returns the Archived field value
func (o *Bookmark) GetArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value
// and a boolean to check if the value has been set.
func (o *Bookmark) GetArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Archived, true
}

// SetArchived sets field value
func (o *Bookmark) SetArchived(v bool) {
	o.Archived = v
}

// GetFavourited returns the Favourited field value
func (o *Bookmark) GetFavourited() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Favourited
}

// GetFavouritedOk returns a tuple with the Favourited field value
// and a boolean to check if the value has been set.
func (o *Bookmark) GetFavouritedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Favourited, true
}

// SetFavourited sets field value
func (o *Bookmark) SetFavourited(v bool) {
	o.Favourited = v
}

// GetTaggingStatus returns the TaggingStatus field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Bookmark) GetTaggingStatus() string {
	if o == nil || o.TaggingStatus.Get() == nil {
		var ret string
		return ret
	}

	return *o.TaggingStatus.Get()
}

// GetTaggingStatusOk returns a tuple with the TaggingStatus field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bookmark) GetTaggingStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaggingStatus.Get(), o.TaggingStatus.IsSet()
}

// SetTaggingStatus sets field value
func (o *Bookmark) SetTaggingStatus(v string) {
	o.TaggingStatus.Set(&v)
}

// GetNote returns the Note field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bookmark) GetNote() string {
	if o == nil || IsNil(o.Note.Get()) {
		var ret string
		return ret
	}
	return *o.Note.Get()
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bookmark) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Note.Get(), o.Note.IsSet()
}

// HasNote returns a boolean if a field has been set.
func (o *Bookmark) HasNote() bool {
	if o != nil && o.Note.IsSet() {
		return true
	}

	return false
}

// SetNote gets a reference to the given NullableString and assigns it to the Note field.
func (o *Bookmark) SetNote(v string) {
	o.Note.Set(&v)
}
// SetNoteNil sets the value for Note to be an explicit nil
func (o *Bookmark) SetNoteNil() {
	o.Note.Set(nil)
}

// UnsetNote ensures that no value is present for Note, not even an explicit nil
func (o *Bookmark) UnsetNote() {
	o.Note.Unset()
}

// GetSummary returns the Summary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Bookmark) GetSummary() string {
	if o == nil || IsNil(o.Summary.Get()) {
		var ret string
		return ret
	}
	return *o.Summary.Get()
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Bookmark) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Summary.Get(), o.Summary.IsSet()
}

// HasSummary returns a boolean if a field has been set.
func (o *Bookmark) HasSummary() bool {
	if o != nil && o.Summary.IsSet() {
		return true
	}

	return false
}

// SetSummary gets a reference to the given NullableString and assigns it to the Summary field.
func (o *Bookmark) SetSummary(v string) {
	o.Summary.Set(&v)
}
// SetSummaryNil sets the value for Summary to be an explicit nil
func (o *Bookmark) SetSummaryNil() {
	o.Summary.Set(nil)
}

// UnsetSummary ensures that no value is present for Summary, not even an explicit nil
func (o *Bookmark) UnsetSummary() {
	o.Summary.Unset()
}

// GetTags returns the Tags field value
func (o *Bookmark) GetTags() []BookmarkTagsInner {
	if o == nil {
		var ret []BookmarkTagsInner
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *Bookmark) GetTagsOk() ([]BookmarkTagsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *Bookmark) SetTags(v []BookmarkTagsInner) {
	o.Tags = v
}

// GetContent returns the Content field value
func (o *Bookmark) GetContent() BookmarkContent {
	if o == nil {
		var ret BookmarkContent
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *Bookmark) GetContentOk() (*BookmarkContent, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *Bookmark) SetContent(v BookmarkContent) {
	o.Content = v
}

// GetAssets returns the Assets field value
func (o *Bookmark) GetAssets() []BookmarksBookmarkIdAssetsPostRequest {
	if o == nil {
		var ret []BookmarksBookmarkIdAssetsPostRequest
		return ret
	}

	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value
// and a boolean to check if the value has been set.
func (o *Bookmark) GetAssetsOk() ([]BookmarksBookmarkIdAssetsPostRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assets, true
}

// SetAssets sets field value
func (o *Bookmark) SetAssets(v []BookmarksBookmarkIdAssetsPostRequest) {
	o.Assets = v
}

func (o Bookmark) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Bookmark) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["createdAt"] = o.CreatedAt
	toSerialize["modifiedAt"] = o.ModifiedAt.Get()
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	toSerialize["archived"] = o.Archived
	toSerialize["favourited"] = o.Favourited
	toSerialize["taggingStatus"] = o.TaggingStatus.Get()
	if o.Note.IsSet() {
		toSerialize["note"] = o.Note.Get()
	}
	if o.Summary.IsSet() {
		toSerialize["summary"] = o.Summary.Get()
	}
	toSerialize["tags"] = o.Tags
	toSerialize["content"] = o.Content
	toSerialize["assets"] = o.Assets
	return toSerialize, nil
}

func (o *Bookmark) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"createdAt",
		"modifiedAt",
		"archived",
		"favourited",
		"taggingStatus",
		"tags",
		"content",
		"assets",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBookmark := _Bookmark{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBookmark)

	if err != nil {
		return err
	}

	*o = Bookmark(varBookmark)

	return err
}

type NullableBookmark struct {
	value *Bookmark
	isSet bool
}

func (v NullableBookmark) Get() *Bookmark {
	return v.value
}

func (v *NullableBookmark) Set(val *Bookmark) {
	v.value = val
	v.isSet = true
}

func (v NullableBookmark) IsSet() bool {
	return v.isSet
}

func (v *NullableBookmark) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookmark(val *Bookmark) *NullableBookmark {
	return &NullableBookmark{value: val, isSet: true}
}

func (v NullableBookmark) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookmark) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


