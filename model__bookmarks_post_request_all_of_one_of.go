/*
Hoarder API

The API for the Hoarder app

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BookmarksPostRequestAllOfOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BookmarksPostRequestAllOfOneOf{}

// BookmarksPostRequestAllOfOneOf struct for BookmarksPostRequestAllOfOneOf
type BookmarksPostRequestAllOfOneOf struct {
	Type string `json:"type"`
	Url string `json:"url"`
	PrecrawledArchiveId *string `json:"precrawledArchiveId,omitempty"`
}

type _BookmarksPostRequestAllOfOneOf BookmarksPostRequestAllOfOneOf

// NewBookmarksPostRequestAllOfOneOf instantiates a new BookmarksPostRequestAllOfOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookmarksPostRequestAllOfOneOf(type_ string, url string) *BookmarksPostRequestAllOfOneOf {
	this := BookmarksPostRequestAllOfOneOf{}
	this.Type = type_
	this.Url = url
	return &this
}

// NewBookmarksPostRequestAllOfOneOfWithDefaults instantiates a new BookmarksPostRequestAllOfOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookmarksPostRequestAllOfOneOfWithDefaults() *BookmarksPostRequestAllOfOneOf {
	this := BookmarksPostRequestAllOfOneOf{}
	return &this
}

// GetType returns the Type field value
func (o *BookmarksPostRequestAllOfOneOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BookmarksPostRequestAllOfOneOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BookmarksPostRequestAllOfOneOf) SetType(v string) {
	o.Type = v
}

// GetUrl returns the Url field value
func (o *BookmarksPostRequestAllOfOneOf) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *BookmarksPostRequestAllOfOneOf) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *BookmarksPostRequestAllOfOneOf) SetUrl(v string) {
	o.Url = v
}

// GetPrecrawledArchiveId returns the PrecrawledArchiveId field value if set, zero value otherwise.
func (o *BookmarksPostRequestAllOfOneOf) GetPrecrawledArchiveId() string {
	if o == nil || IsNil(o.PrecrawledArchiveId) {
		var ret string
		return ret
	}
	return *o.PrecrawledArchiveId
}

// GetPrecrawledArchiveIdOk returns a tuple with the PrecrawledArchiveId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookmarksPostRequestAllOfOneOf) GetPrecrawledArchiveIdOk() (*string, bool) {
	if o == nil || IsNil(o.PrecrawledArchiveId) {
		return nil, false
	}
	return o.PrecrawledArchiveId, true
}

// HasPrecrawledArchiveId returns a boolean if a field has been set.
func (o *BookmarksPostRequestAllOfOneOf) HasPrecrawledArchiveId() bool {
	if o != nil && !IsNil(o.PrecrawledArchiveId) {
		return true
	}

	return false
}

// SetPrecrawledArchiveId gets a reference to the given string and assigns it to the PrecrawledArchiveId field.
func (o *BookmarksPostRequestAllOfOneOf) SetPrecrawledArchiveId(v string) {
	o.PrecrawledArchiveId = &v
}

func (o BookmarksPostRequestAllOfOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BookmarksPostRequestAllOfOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["url"] = o.Url
	if !IsNil(o.PrecrawledArchiveId) {
		toSerialize["precrawledArchiveId"] = o.PrecrawledArchiveId
	}
	return toSerialize, nil
}

func (o *BookmarksPostRequestAllOfOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBookmarksPostRequestAllOfOneOf := _BookmarksPostRequestAllOfOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBookmarksPostRequestAllOfOneOf)

	if err != nil {
		return err
	}

	*o = BookmarksPostRequestAllOfOneOf(varBookmarksPostRequestAllOfOneOf)

	return err
}

type NullableBookmarksPostRequestAllOfOneOf struct {
	value *BookmarksPostRequestAllOfOneOf
	isSet bool
}

func (v NullableBookmarksPostRequestAllOfOneOf) Get() *BookmarksPostRequestAllOfOneOf {
	return v.value
}

func (v *NullableBookmarksPostRequestAllOfOneOf) Set(val *BookmarksPostRequestAllOfOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBookmarksPostRequestAllOfOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBookmarksPostRequestAllOfOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookmarksPostRequestAllOfOneOf(val *BookmarksPostRequestAllOfOneOf) *NullableBookmarksPostRequestAllOfOneOf {
	return &NullableBookmarksPostRequestAllOfOneOf{value: val, isSet: true}
}

func (v NullableBookmarksPostRequestAllOfOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookmarksPostRequestAllOfOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


