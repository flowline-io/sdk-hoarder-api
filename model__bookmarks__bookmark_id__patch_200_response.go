/*
Hoarder API

The API for the Hoarder app

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BookmarksBookmarkIdPatch200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BookmarksBookmarkIdPatch200Response{}

// BookmarksBookmarkIdPatch200Response struct for BookmarksBookmarkIdPatch200Response
type BookmarksBookmarkIdPatch200Response struct {
	Id            string         `json:"id"`
	CreatedAt     string         `json:"createdAt"`
	Title         NullableString `json:"title,omitempty"`
	Archived      bool           `json:"archived"`
	Favourited    bool           `json:"favourited"`
	TaggingStatus NullableString `json:"taggingStatus"`
	Note          NullableString `json:"note,omitempty"`
	Summary       NullableString `json:"summary,omitempty"`
}

type _BookmarksBookmarkIdPatch200Response BookmarksBookmarkIdPatch200Response

// NewBookmarksBookmarkIdPatch200Response instantiates a new BookmarksBookmarkIdPatch200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookmarksBookmarkIdPatch200Response(id string, createdAt string, archived bool, favourited bool, taggingStatus NullableString) *BookmarksBookmarkIdPatch200Response {
	this := BookmarksBookmarkIdPatch200Response{}
	this.Id = id
	this.CreatedAt = createdAt
	this.Archived = archived
	this.Favourited = favourited
	this.TaggingStatus = taggingStatus
	return &this
}

// NewBookmarksBookmarkIdPatch200ResponseWithDefaults instantiates a new BookmarksBookmarkIdPatch200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookmarksBookmarkIdPatch200ResponseWithDefaults() *BookmarksBookmarkIdPatch200Response {
	this := BookmarksBookmarkIdPatch200Response{}
	return &this
}

// GetId returns the Id field value
func (o *BookmarksBookmarkIdPatch200Response) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BookmarksBookmarkIdPatch200Response) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BookmarksBookmarkIdPatch200Response) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *BookmarksBookmarkIdPatch200Response) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *BookmarksBookmarkIdPatch200Response) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *BookmarksBookmarkIdPatch200Response) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BookmarksBookmarkIdPatch200Response) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BookmarksBookmarkIdPatch200Response) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *BookmarksBookmarkIdPatch200Response) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *BookmarksBookmarkIdPatch200Response) SetTitle(v string) {
	o.Title.Set(&v)
}

// SetTitleNil sets the value for Title to be an explicit nil
func (o *BookmarksBookmarkIdPatch200Response) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *BookmarksBookmarkIdPatch200Response) UnsetTitle() {
	o.Title.Unset()
}

// GetArchived returns the Archived field value
func (o *BookmarksBookmarkIdPatch200Response) GetArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value
// and a boolean to check if the value has been set.
func (o *BookmarksBookmarkIdPatch200Response) GetArchivedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Archived, true
}

// SetArchived sets field value
func (o *BookmarksBookmarkIdPatch200Response) SetArchived(v bool) {
	o.Archived = v
}

// GetFavourited returns the Favourited field value
func (o *BookmarksBookmarkIdPatch200Response) GetFavourited() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Favourited
}

// GetFavouritedOk returns a tuple with the Favourited field value
// and a boolean to check if the value has been set.
func (o *BookmarksBookmarkIdPatch200Response) GetFavouritedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Favourited, true
}

// SetFavourited sets field value
func (o *BookmarksBookmarkIdPatch200Response) SetFavourited(v bool) {
	o.Favourited = v
}

// GetTaggingStatus returns the TaggingStatus field value
// If the value is explicit nil, the zero value for string will be returned
func (o *BookmarksBookmarkIdPatch200Response) GetTaggingStatus() string {
	if o == nil || o.TaggingStatus.Get() == nil {
		var ret string
		return ret
	}

	return *o.TaggingStatus.Get()
}

// GetTaggingStatusOk returns a tuple with the TaggingStatus field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BookmarksBookmarkIdPatch200Response) GetTaggingStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaggingStatus.Get(), o.TaggingStatus.IsSet()
}

// SetTaggingStatus sets field value
func (o *BookmarksBookmarkIdPatch200Response) SetTaggingStatus(v string) {
	o.TaggingStatus.Set(&v)
}

// GetNote returns the Note field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BookmarksBookmarkIdPatch200Response) GetNote() string {
	if o == nil || IsNil(o.Note.Get()) {
		var ret string
		return ret
	}
	return *o.Note.Get()
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BookmarksBookmarkIdPatch200Response) GetNoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Note.Get(), o.Note.IsSet()
}

// HasNote returns a boolean if a field has been set.
func (o *BookmarksBookmarkIdPatch200Response) HasNote() bool {
	if o != nil && o.Note.IsSet() {
		return true
	}

	return false
}

// SetNote gets a reference to the given NullableString and assigns it to the Note field.
func (o *BookmarksBookmarkIdPatch200Response) SetNote(v string) {
	o.Note.Set(&v)
}

// SetNoteNil sets the value for Note to be an explicit nil
func (o *BookmarksBookmarkIdPatch200Response) SetNoteNil() {
	o.Note.Set(nil)
}

// UnsetNote ensures that no value is present for Note, not even an explicit nil
func (o *BookmarksBookmarkIdPatch200Response) UnsetNote() {
	o.Note.Unset()
}

// GetSummary returns the Summary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BookmarksBookmarkIdPatch200Response) GetSummary() string {
	if o == nil || IsNil(o.Summary.Get()) {
		var ret string
		return ret
	}
	return *o.Summary.Get()
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BookmarksBookmarkIdPatch200Response) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Summary.Get(), o.Summary.IsSet()
}

// HasSummary returns a boolean if a field has been set.
func (o *BookmarksBookmarkIdPatch200Response) HasSummary() bool {
	if o != nil && o.Summary.IsSet() {
		return true
	}

	return false
}

// SetSummary gets a reference to the given NullableString and assigns it to the Summary field.
func (o *BookmarksBookmarkIdPatch200Response) SetSummary(v string) {
	o.Summary.Set(&v)
}

// SetSummaryNil sets the value for Summary to be an explicit nil
func (o *BookmarksBookmarkIdPatch200Response) SetSummaryNil() {
	o.Summary.Set(nil)
}

// UnsetSummary ensures that no value is present for Summary, not even an explicit nil
func (o *BookmarksBookmarkIdPatch200Response) UnsetSummary() {
	o.Summary.Unset()
}

func (o BookmarksBookmarkIdPatch200Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BookmarksBookmarkIdPatch200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["createdAt"] = o.CreatedAt
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	toSerialize["archived"] = o.Archived
	toSerialize["favourited"] = o.Favourited
	toSerialize["taggingStatus"] = o.TaggingStatus.Get()
	if o.Note.IsSet() {
		toSerialize["note"] = o.Note.Get()
	}
	if o.Summary.IsSet() {
		toSerialize["summary"] = o.Summary.Get()
	}
	return toSerialize, nil
}

func (o *BookmarksBookmarkIdPatch200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"createdAt",
		"archived",
		"favourited",
		"taggingStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBookmarksBookmarkIdPatch200Response := _BookmarksBookmarkIdPatch200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBookmarksBookmarkIdPatch200Response)

	if err != nil {
		return err
	}

	*o = BookmarksBookmarkIdPatch200Response(varBookmarksBookmarkIdPatch200Response)

	return err
}

type NullableBookmarksBookmarkIdPatch200Response struct {
	value *BookmarksBookmarkIdPatch200Response
	isSet bool
}

func (v NullableBookmarksBookmarkIdPatch200Response) Get() *BookmarksBookmarkIdPatch200Response {
	return v.value
}

func (v *NullableBookmarksBookmarkIdPatch200Response) Set(val *BookmarksBookmarkIdPatch200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableBookmarksBookmarkIdPatch200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableBookmarksBookmarkIdPatch200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookmarksBookmarkIdPatch200Response(val *BookmarksBookmarkIdPatch200Response) *NullableBookmarksBookmarkIdPatch200Response {
	return &NullableBookmarksBookmarkIdPatch200Response{value: val, isSet: true}
}

func (v NullableBookmarksBookmarkIdPatch200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookmarksBookmarkIdPatch200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
